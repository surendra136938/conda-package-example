version: 2.1

# orbs:
#   moverdc: moverdc/move-ci@0

parameters:
  release_branch:
    type: string
    default: "main"
  artifactory_repo:
    type: string
    default: "InnerOpenSource-shared-pypi-local"

executors:
  container:
    docker:
      - image: cimg/python:3.9
        environment:
          PYTHONPATH: /home/circleci/project/lib
  linux-vm:
    machine:
      image: ubuntu-2204:current # see https://circleci.com/developer/machine/image/ubuntu-2204
    resource_class: large

jobs:
  setup:
    executor: container
    steps:
      - attach_workspace:
          at: .
      - moverdc/aws-proxy-up:
          export-proxy-variables: http
      - checkout
      - run:
          name: setup lib directory
          command: mkdir ./lib
      - run:
          name: Install python requirements
          command: pip3 install --no-cache-dir -r requirements.txt -t ./lib
      - persist_to_workspace:
          root: .
          paths:
            - .

  linting:
    executor: container
    steps:
      - attach_workspace:
          at: .
      - run:
          name: linting
          command: python -m invoke lint.run

  test:
    executor: linux-vm
    environment:
      NO_PROXY: 127.0.0.1,localhost,localstack
    steps:
      - attach_workspace:
          at: .
      - moverdc/aws-proxy-up:
          export-proxy-variables: http
      - run:
          name: "Switch to Python 3.9"
          command: |
            pyenv install 3.9.14
            pyenv global 3.9.14
      - run:
          name: Start Docker Compose and verify LocalStack
          command: |
            docker-compose up -d
            sleep 10
            aws --endpoint-url=http://localhost:4566 s3api list-buckets 1> /dev/null
      - run:
          name: Install Python modules
          command: pip3 install --no-cache-dir -r requirements.txt
      - run:
          name: Run Python tests
          command: python3 -m invoke test.run
      - run:
          name: check coverage
          command: python3 -m coverage report
      - run:
          name: Docker Compose tear-down
          command: |
            docker-compose kill
            docker-compose rm -f -v
      - persist_to_workspace:
          root: .
          paths:
            - .coverage

  static-analysis:
    executor: container
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Static Type Analysis
          command: python -m invoke typecheck.run

  sonar:
    executor: container
    steps:
      - moverdc/aws-proxy-up:
          export-proxy-variables: socks5
      - attach_workspace:
          at: .
      - run:
          name: Generate coverage report
          command: python -m coverage xml
      - moverdc/sonar-scan

  publish:
    executor: container
    steps:
      - attach_workspace:
          at: .
      - moverdc/artifactory-python-publish-legacy:
          release-branch: << pipeline.parameters.release_branch >>
          artifactory-repo: << pipeline.parameters.artifactory_repo >>

  check_for_changes:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Check for changes in "my_package" directory
          command: |
            if git diff --quiet HEAD^...HEAD -- my_package/; then
              echo "No changes detected in my_package"
              echo 'export SKIP_PIPELINE="true"' >> $BASH_ENV
            else
              echo "Changes detected in my_package"
              echo 'export SKIP_PIPELINE="false"' >> $BASH_ENV
      - run:
          name: Trigger my_package Build
          command: |
            if [ "$SKIP_PIPELINE" = "false" ]; then
              circleci config process .circleci/ocpipes.yml > processed.yml
              circleci local execute -c processed.yml
            else
              echo "Skipping my_package build"
            fi

workflows:
  build-pipeline:
    jobs:
      - setup:
          context:
            - artifactory
            - aws
      - linting:
          requires:
            - setup
      - test:
          requires:
            - setup
          context:
            - aws
      - static-analysis:
          requires:
            - setup
      - sonar:
          context: [aws, sonarqube]
          requires:
            - test
      - publish:
          requires:
            - linting
            - static-analysis
            - test
            - sonar
          context:
            - artifactory
            - github
            - was
      - check_for_changes:
          requires:
            - publish
